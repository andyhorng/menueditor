// Generated by CoffeeScript 1.9.3
(function() {
  angular.module("menuEditorApp", ['ui.bootstrap', 'ui.router']).config(function($stateProvider) {
    return $stateProvider.state('list', {
      url: "/",
      templateUrl: "/assets/templates/list.html"
    }).state('menu', {
      url: "/:id",
      templateUrl: "/assets/templates/menu.html"
    });
  }).controller("MenuListController", function($http, $modal, $rootScope, $window) {
    this.menus = [];
    $http.get('/api/menu').success((function(_this) {
      return function(data) {
        return _this.menus = data;
      };
    })(this));
    this.newMenu = (function(_this) {
      return function() {
        var modalInstance;
        modalInstance = $modal.open({
          templateUrl: "/assets/templates/new.html",
          controller: function($scope, $modalInstance, $http) {
            $scope.menu = {};
            $scope.save = (function(_this) {
              return function() {
                return $http.post("/api/menu", $scope.menu).success(function(data) {
                  return $modalInstance.close(data);
                });
              };
            })(this);
            $scope.cancel = (function(_this) {
              return function() {
                return $modalInstance.dismiss("cancel");
              };
            })(this);
            return this;
          }
        });
        return modalInstance.result.then(function(rt) {
          return _this.menus.push(rt);
        });
      };
    })(this);
    this.deleteMenu = (function(_this) {
      return function(ix, menuId) {
        if ($window.confirm("Are you sure?")) {
          return $http["delete"]("/api/menu/" + menuId).success(function() {
            _this.menus.splice(ix, 1);
            return $rootScope.$emit("alert", {
              type: "success",
              msg: "Deleted"
            });
          });
        }
      };
    })(this);
    return this;
  }).controller("MenuController", function($http, $stateParams, $rootScope) {
    this.menu = {};
    $http.get("/api/menu/" + $stateParams.id).success((function(_this) {
      return function(data) {
        return _this.menu = data;
      };
    })(this));
    this.save = (function(_this) {
      return function(menu) {
        delete menu.id;
        return $http.patch("/api/menu/" + $stateParams.id, menu).success(function(data) {
          return $rootScope.$emit("alert", {
            type: "success",
            msg: "Success"
          });
        });
      };
    })(this);
    this.addAddress = (function(_this) {
      return function() {
        var base;
        (base = _this.menu).addresses || (base.addresses = []);
        return _this.menu.addresses.push({});
      };
    })(this);
    this.removeAddress = (function(_this) {
      return function(ix) {
        return _this.menu.addresses.splice(ix, 1);
      };
    })(this);
    this.addBusinessHour = (function(_this) {
      return function() {
        var base;
        (base = _this.menu).business_hours || (base.business_hours = []);
        return _this.menu.business_hours.push({});
      };
    })(this);
    this.removeBusinessHour = (function(_this) {
      return function(ix) {
        return _this.menu.business_hours.splice(ix, 1);
      };
    })(this);
    this.addItem = (function(_this) {
      return function() {
        var base;
        (base = _this.menu).items || (base.items = []);
        return _this.menu.items.push({
          customs: angular.copy(_this.customs)
        });
      };
    })(this);
    this.removeItem = (function(_this) {
      return function(ix) {
        return _this.menu.items.splice(ix, 1);
      };
    })(this);
    this.customs = {
      hotcold: ['冷', '熱'],
      ice: ['正常', '少冰', '微冰', '去冰'],
      sweet: ['正常', '少糖', '半糖', '微糖', '無糖'],
      size: ['小', '中', '大', '特大', '巨無霸']
    };
    return this;
  }).controller("AlertController", function($rootScope, $timeout) {
    this.alerts = [];
    this.closeAlert = (function(_this) {
      return function() {
        return _this.alerts.shift();
      };
    })(this);
    $rootScope.$on("alert", (function(_this) {
      return function(e, alert) {
        _this.alerts.push(alert);
        return $timeout(_this.closeAlert, 3000);
      };
    })(this));
    return this;
  });

}).call(this);
